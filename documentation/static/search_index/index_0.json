{"/doc/InstallingFlutterPackages.html":{"title":"","content":"## Installing Flutter Packages You continue to work in the same folder of the learngun flutter App that you opened in the previous step. Open the **pubspec.yaml** file. Click on your learngun flutter project then find the file **pubspec.yaml.** ![13](./images/13.png) Click on the **Packages get.** ![14](./images/14.png) Wait for the process to finish. ![15](./images/15.png) Now you can check your app. For this, activate the emulator and click run."},"/doc/PackageNameandAppName.html":{"title":"","content":"## changing package name open **android/build.gradle** file and change **applicationId** on line 52 ![22](./images/22.png) ## changing app name open **android/app/src/main/AndroidManifest.xml** file and change the **android:label** to your app name. ![21](./images/21.png) ## changing splash Open assets folder on code's root folder and replace **\"logo.png\"** with your logo ![23](./images/23.png)"},"/doc/paymentGateways.html":{"title":"","content":"## payment gateways open **lib/utils/constants.dart** ### Paypal ![33](./images/33.png) > check out this tutorial for complete details to get client api key and secret: [https://www.appinvoice.com/en/s/documentation/how to get paypal client id and secret key 22](https://www.appinvoice.com/en/s/documentation/how to get paypal client id and secret key 22) just change the below details in the constants.dart file: **paypalClientId** Your paypal client ID that you can get from dashboard **paypalSecret** Your paypal client secret that you can get from dashboard **returnURL** Any link which will be cached after user successful payment, recommended to be your website url **cancelURL** Any link which will be cached after user cancelled payment, recommended to be your website url **paypalTransactionDescription** Payment description that will be shown on your dashboard **paypalNotePayer** Text that will be shown to buyer ### Stripe ![34](./images/34.png) > check out this tutorial for complete details to get publishable key and secret key: [https://stripe.com/docs/keys](https://stripe.com/docs/keys) **stripePublishableKey** Your Stripe Publishable Key **stripeSecretKey** Your Stripe Secret Key **stripeCurrency** Currency code as per [https://stripe.com/docs/currencies](https://stripe.com/docs/currencies) **stripemerchantCountryCode** Your country code as per [https://gist.github.com/jylopez/7a3eb87e94981a579303a73cf72a5086](https://gist.github.com/jylopez/7a3eb87e94981a579303a73cf72a5086) **stripemerchantDisplayName** Name that will be displayed during payment ### UPI ![35](./images/35.png) **receiverUpiId** UPI ID of the receiver **receiverName** Name of the receiver as per the UPI platform ### RazorPay just change the below in the constants.dart file: **razorPayApiKey** RazorPay Api Key that you got from it's website."},"/doc/index.html":{"title":"","content":"## LearnBoss LMS Mobile App LearnBoss LMS App was developed with the Flutter framework. Based on the website you have, you can build our own app for Android device. We prepared a detailed guide for you to help you go through this process. Please follow the steps described precisely to have a successful result. **Created: 12/02/2023** **By: TechGun Team** **Email: [techgun22@gmail.com](mailto:techgun22@gmail.com)**"},"/doc/SettingtheSiteURL.html":{"title":"","content":"## Setting the Site URL Now you need to edit one file in order to include in the data your website address, thus, enable the synchronization of your site and app. Open the folder with the app and find the following file there: **lib/utils/constants.dart** Open the file **constants.dart** via Notepad or similar editor. In this file, you will see the following string: static const **baseUrl**. Paste your website URL here. ![16](./images/16.png) Now you can follow to the next step of adding the icon to your mobile application. See the next section."},"/doc/AddingAppIcon.html":{"title":"","content":"## Adding App Icon Open the following folder: …/app/src/main/res and double click on the folder res. ![18](./images/18.png) There will be the menu, where you need to hover over the New line and select from the submenu Image Asset. ![19](./images/19.png) Select your icon from your PC or device and set it up. ![20](./images/20.png) > The more detailed documentation about Image Asset work you can find here: [https://developer.android.com/studio/write/image asset studio](https://developer.android.com/studio/write/image asset studio)"},"/doc/AdmobAds.html":{"title":"","content":"## Google admob ads in resources 1. After creating admob account from [admob website](https://admob.google.com/home/) , go to apps sections and hit \"add your first app\" ![62](./images/62.png) 2. select app platform and hit \"continue\" ![63](./images/63.png) 3. After adding app, hit \"Add ad unit\" ![64](./images/64.png) 4. Select \"interstitial\" and give any name to the unit and create ad unit ![65](./images/65.png) 5. You can find app ID and ad unit id after creating ![66](./images/66.png) 6. Open **\\android\\app\\src\\main\\AndroidManifest.xml** within our code and paste the app ID in **line 10** ![67](./images/67.png) 7. Open **lib\\Utils\\constants.dart** within the code and paste **ad unit id** in **InterstitialUnitId** variable. Also, **ShowAds** variable will decide whether or not to show ads ![68](./images/68.png) That's it, now ads from your account will be showing in the app."},"/doc/AndroidstudioSetup.html":{"title":"","content":"## Android studio Setup First, unzip the learngun flutter code. Then open Android Studio and open the existing learngun flutter app project in it. ![10](./images/10.png) Now you need to install the **Flutter plugin**. Go to **File > Settings > Plugin**. Search for the Flutter plugin and click **Install**. ![11](./images/11.jpg) After this step, follow to **Settings > Languages & Frameworks > Dart** to set up Dart SDK. Enter the **Dart SDK Path** in the field provided. Specify the path to the unpacked archives from the previous step. Then move on to the Flutter tab and enter the **Flutter SDK Path**. Now when everything is ready, you can start building your Android App. ![12](./images/12.png)"},"/doc/apiplugin.html":{"title":"","content":"## LearnGun LMS API Plugin setup Your work will start with the installation of several items. First, you need to install \"learnboss wordpress plugin.zip\" plugin, given along with our flutter code. From the admin panel of your website go to Plugins > Add New > Upload Plugins. Upload the zip plugin file and install it. ![1](images/1.png) ![2](images/2.png) After the installation is done, don’t forget to activate it. Plugin Settings. Now you can set up the plugin. Go to the learndash app options from menu and enter your purchase code on the \"configurations\" page and save changes ![4](images/4.png) ![5](images/5.png)"},"/doc/AppRelease.html":{"title":"","content":"## App Release After you tested your app, you can sign the app for release to Google Play. > This manual aims to display all the key steps for generating a signed app bundle. Please follow this link for the more detailed guide: [https://developer.android.com/studio/publish/app signing#sign apk](https://developer.android.com/studio/publish/app signing#sign apk) For this, you need to open Build > Generate Signed Bundle / APK… ![26](./images/26.png) In the new window select Android App Bundle. ![27](./images/27.png) After that, in a new opened window select the Key or create a new one. ![28](./images/28.png) Here is an instruction on how to create a new Key. Click on the Create new. You will see the new window opened. Click on the folder icon in the right top corner. ![29](./images/29.png) Select the folder where the Key will be stored. Fill in the information (all fields). ![30](./images/30.png) Next, check the Export encrypted key, if it is the update of the already uploaded app to the Google Play. > Please find more information here: [https://developer.android.com/studio/publish/app signing#enroll_existing](https://developer.android.com/studio/publish/app signing#enroll_existing) Now you need to select Release option and launch app building process. ![31](./images/31.png) After that, Android Studio will notify you that app building process is finished (see the notification in the right bottom corner). ![32](./images/32.png) By clicking on the Locate you will be redirected to the folder where the file is stored. Also, app bundle can be found here: Project folder > Android > App > Release > The full guide describing how to upload the app to the Google Play Console can be found here: [https://developer.android.com/studio/publish/upload bundle](https://developer.android.com/studio/publish/upload bundle)"},"/doc/basicChanges.html":{"title":"","content":"## Basic changes open **lib/utils/constants.dart** ![16](./images/16.png) **baseUrl** This is the URL of the server where the mobile app makes API calls. **primaryColor** This is the primary color of the mobile app. You can edit this by changing the value of the const Color function to a different hexadecimal color code. **secondaryColor** This is the secondary color of the mobile app. You can edit this by changing the value of the const Color function to a different hexadecimal color code. **currency** This is the currency symbol used in the mobile app. paymentGateways This is the list of payment gateways supported by the mobile app. **appName** This is the name of the mobile app. **purchaseCode** This is the unique code that you need to purchase from codecanyon. **screenProtectOn** This is a boolean value that determines whether screen protection is enabled or not. **supportedFileTypes** This is the list of supported file types that can be uploaded in the mobile app. **resourcesSection** This is the list of sections in the resources tab of the mobile app."},"/doc/FirebaseNotificationAndGoogleLogin.html":{"title":"","content":"## Firebase Notification And Google Login Firebase Notification And Google Login feature is integrated with Google Firebase service. You need to sign up on the Firebase website and create a new project. Then, add your app to your Firebase project to register app. Create a new project. ![43](./images/43.jpg) In the newly opened window enter the name of the project. And click **Continue**. ![44](./images/44.png) Next, select Google Analytics account or create a new one. Click on the Create Project. ![45](./images/45.png) Wait for the project to load. ![46](./images/46.png) On the opened page select the app platform Android. ![47](./images/47.jpg) Write the package name and click on the Register app. ![48](./images/48.png) The config file will be generated. You need to download it and upload to the following folder: Android > App in the project Learngun App. ![49](./images/49.jpg) You will be notified that the file with the same name already exists. You need to confirm that you want to replace it. ### Push Notification Find the **Cloud Messaging** menu on the Firebase Dashboard. ![50](./images/50.png) On the new page click on the **Send your first message** button. ![51](./images/51.png) Fill in the required fields and click on **Next**. Please note before sending the test message, first you need to set up your App in Android Studio and launch it on the virtual device. ![52](./images/52.png) After that, select the name of the project. ![53](./images/53.png) Then, fill the fields that left depending on your preferences and click Review. ![54](./images/54.png) You will see the next window, just click Publish and you are set. ![55](./images/55.png) ### Google Login Just go to authentication from Firebase menu and enable **Google Sign In** in **Sign In providers** and hit **save** and then google signin will be working on the app. ![56](./images/56.png)"},"/doc/FlutterEnvironment.html":{"title":"","content":"## Flutter Environment For the full and smooth work, you need to install the Flutter environment, which is a multi paradigm programming environment, required for you to build your own LMS app. First, download the Flutter SDK, the installation bundle to get the latest stable release of the Flutter SDK. Depending on the system you are using follow these links to get the installation file: * macOS [https://flutter.dev/docs/get started/install/macos](https://flutter.dev/docs/get started/install/macos) * Windows [https://flutter.dev/docs/get started/install/windows](https://flutter.dev/docs/get started/install/windows) * Linux [https://flutter.dev/docs/get started/install/linux](https://flutter.dev/docs/get started/install/linux) > We recommend you using the Flutter SDK 3.7.3 stable version for LearnGun LMS App. Once you downloaded the installation zip package, create a folder, and extract there the Flutter SDK. Use the desired location, extract the Flutter, and archive that folder."},"/doc/FlutterSetup.html":{"title":"","content":"## Flutter Setup Download the Flutter zip file for system: [https://flutter.dev/docs/get started/install/windows#get the flutter sdk](https://flutter.dev/docs/get started/install/windows#get the flutter sdk) Extract the zip file and place it in the desired installation location for Flutter SDK (for example, C:\\src\\flutter). After that, you also need to download Dart SDK. Use this link to download the file [https://dart.dev/get dart](https://dart.dev/get dart) Extract the downloaded file to the same folder you extracted Flutter, you will need this folder for the further Android Studio setup. > Do not install Flutter in a directory like C:\\Program Files\\ that requires elevated privileges. Using the Start search bar on your computer, enter “env” in the search field and select the option Edit environment variables for your account. ![6](./images/6.jpg) Next, in the Environment variables in the User Variables field check if there is an entry called Path. * If the entry exists, add a full path to flutter\\bin. * If the entry doesn’t exist, create a new user variable named Path with the full path to flutter\\bin. ![7](./images/7.jpg) ![8](./images/8.jpg) After that, you need to run the command flutter doctor, which will help you to identify if there are any dependencies you need to install in order to complete the setup. Run this command: C:\\src\\flutter>flutter doctor ![9](./images/9.png) When the flutter doctor finishes checking, you can complete the installation of Flutter SDK."}}